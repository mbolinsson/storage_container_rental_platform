{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport function handleRegex(e) {\n  const target = e.target;\n  const value = target.value;\n  const name = target.name;\n  let error = false;\n  let regex = \"\";\n\n  switch (target.name) {\n    case \"fornamn\":\n      regex = /^[a-öA-Ö]{2,21}$/;\n      break;\n\n    case \"efternamn\":\n      regex = /^[a-öA-Ö]{2,21}$/;\n      break;\n\n    case \"email\":\n      regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      break;\n\n    case \"personnummer\":\n      regex = /^(19|20)?[0-9]{6}[- ]?[0-9]{4}$/;\n      break;\n\n    case \"telefonnummer\":\n      regex = /^[\\s\\d]+$/;\n      break;\n\n    case \"stad\":\n      regex = /^[a-öA-Ö]{2,21}$/;\n      break;\n\n    case \"gatuAdress\":\n      regex = /^.{5,50}$/;\n      break;\n\n    case \"postnummer\":\n      regex = /^\\d{3} \\d{2}$/;\n      break;\n  }\n\n  console.log(regex);\n  regex.test(state[name]) ? error = false : error = true; // setState({...state, errors[name]: error});\n\n  console.log(state.errors[name]);\n  setState(_objectSpread(_objectSpread({}, state), {}, {\n    [name]: value,\n    errors: {\n      fornamn: state.errors.fornamn,\n      efternamn: state.errors.efternamn,\n      email: state.errors.email,\n      personnummer: state.errors.personnummer,\n      telefonnummer: state.errors.telefonnummer,\n      stad: state.errors.stad,\n      gatuAdress: state.errors.gatuAdress,\n      postnummer: state.errors.postnummer,\n      [name]: error\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/marcusbolinsson/Projects/sbfastigheter/container-platform/utils/regexForm.js"],"names":["handleRegex","e","target","value","name","error","regex","console","log","test","state","errors","setState","fornamn","efternamn","email","personnummer","telefonnummer","stad","gatuAdress","postnummer"],"mappings":";;;;;;AAAA,OAAO,SAASA,WAAT,CAAqBC,CAArB,EAAwB;AAC7B,QAAMC,MAAM,GAAGD,CAAC,CAACC,MAAjB;AACA,QAAMC,KAAK,GAAGD,MAAM,CAACC,KAArB;AACA,QAAMC,IAAI,GAAGF,MAAM,CAACE,IAApB;AACA,MAAIC,KAAK,GAAG,KAAZ;AAEA,MAAIC,KAAK,GAAG,EAAZ;;AAEA,UAAQJ,MAAM,CAACE,IAAf;AACE,SAAK,SAAL;AACEE,MAAAA,KAAK,GAAG,kBAAR;AACA;;AACF,SAAK,WAAL;AACEA,MAAAA,KAAK,GAAG,kBAAR;AACA;;AACF,SAAK,OAAL;AACEA,MAAAA,KAAK,GAAG,wJAAR;AACA;;AACF,SAAK,cAAL;AACEA,MAAAA,KAAK,GAAG,iCAAR;AACA;;AACF,SAAK,eAAL;AACEA,MAAAA,KAAK,GAAG,WAAR;AACA;;AACF,SAAK,MAAL;AACEA,MAAAA,KAAK,GAAG,kBAAR;AACA;;AACF,SAAK,YAAL;AACEA,MAAAA,KAAK,GAAG,WAAR;AACA;;AACF,SAAK,YAAL;AACEA,MAAAA,KAAK,GAAG,eAAR;AACA;AAxBJ;;AA0BAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAA,EAAAA,KAAK,CAACG,IAAN,CAAWC,KAAK,CAACN,IAAD,CAAhB,IAA2BC,KAAK,GAAG,KAAnC,GAA6CA,KAAK,GAAG,IAArD,CAnC6B,CAqC7B;;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYE,KAAK,CAACC,MAAN,CAAaP,IAAb,CAAZ;AACAQ,EAAAA,QAAQ,iCACHF,KADG;AAEN,KAACN,IAAD,GAAQD,KAFF;AAGNQ,IAAAA,MAAM,EAAE;AACNE,MAAAA,OAAO,EAAEH,KAAK,CAACC,MAAN,CAAaE,OADhB;AAENC,MAAAA,SAAS,EAAEJ,KAAK,CAACC,MAAN,CAAaG,SAFlB;AAGNC,MAAAA,KAAK,EAAEL,KAAK,CAACC,MAAN,CAAaI,KAHd;AAINC,MAAAA,YAAY,EAAEN,KAAK,CAACC,MAAN,CAAaK,YAJrB;AAKNC,MAAAA,aAAa,EAAEP,KAAK,CAACC,MAAN,CAAaM,aALtB;AAMNC,MAAAA,IAAI,EAAER,KAAK,CAACC,MAAN,CAAaO,IANb;AAONC,MAAAA,UAAU,EAAET,KAAK,CAACC,MAAN,CAAaQ,UAPnB;AAQNC,MAAAA,UAAU,EAAEV,KAAK,CAACC,MAAN,CAAaS,UARnB;AASN,OAAChB,IAAD,GAAQC;AATF;AAHF,KAAR;AAeD","sourcesContent":["export function handleRegex(e) {\n  const target = e.target;\n  const value = target.value;\n  const name = target.name;\n  let error = false;\n\n  let regex = \"\";\n\n  switch (target.name) {\n    case \"fornamn\":\n      regex = /^[a-öA-Ö]{2,21}$/;\n      break;\n    case \"efternamn\":\n      regex = /^[a-öA-Ö]{2,21}$/;\n      break;\n    case \"email\":\n      regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      break;\n    case \"personnummer\":\n      regex = /^(19|20)?[0-9]{6}[- ]?[0-9]{4}$/;\n      break;\n    case \"telefonnummer\":\n      regex = /^[\\s\\d]+$/;\n      break;\n    case \"stad\":\n      regex = /^[a-öA-Ö]{2,21}$/;\n      break;\n    case \"gatuAdress\":\n      regex = /^.{5,50}$/;\n      break;\n    case \"postnummer\":\n      regex = /^\\d{3} \\d{2}$/;\n      break;\n  }\n  console.log(regex);\n  regex.test(state[name]) ? (error = false) : (error = true);\n\n  // setState({...state, errors[name]: error});\n  console.log(state.errors[name]);\n  setState({\n    ...state,\n    [name]: value,\n    errors: {\n      fornamn: state.errors.fornamn,\n      efternamn: state.errors.efternamn,\n      email: state.errors.email,\n      personnummer: state.errors.personnummer,\n      telefonnummer: state.errors.telefonnummer,\n      stad: state.errors.stad,\n      gatuAdress: state.errors.gatuAdress,\n      postnummer: state.errors.postnummer,\n      [name]: error,\n    },\n  });\n}\n"]},"metadata":{},"sourceType":"module"}